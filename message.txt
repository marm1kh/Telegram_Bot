using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

var e = new Environ();
Console.ReadLine();

internal class Environ
{
    class UserInfo
    {
        public string? Name;      // <-----
        public string? LastName;
        public string? Grade;
        public string? Notes;
    }

    private enum State
    {
        WaitingStart,
        WaitingButton,
        WaitingName,
        WaitingLastName,
        WaitingGrade,
        WaitingNotes,
    }

    private Dictionary<long, State> _userStates;
    private Dictionary<long, UserInfo> _userInfos;

    public Environ()
    {
        _userStates = new();
        _userInfos = new();
        var bot = new TelegramBotClient("6635411143:AAGgN4ZPdhcjcd0Mw27_XCjSVQxaHAtwyw8");
        using CancellationTokenSource cts = new();

        ReceiverOptions receiverOptions = new()
        {
            AllowedUpdates = Array.Empty<UpdateType>()
        };

        bot.StartReceiving(
            updateHandler: HandleUpdateAsync,
            pollingErrorHandler: HandlePollingErrorAsync,
            receiverOptions: receiverOptions,
            cancellationToken: cts.Token
        );
    }

    private async Task HandleStart(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
    {
        if (update.Message != null)
        {
            var replyKeyboard = new ReplyKeyboardMarkup(
                new[]
                {
                    new KeyboardButton[] { "Регистрация", "Авторизация" },
                    new KeyboardButton[] { "Информация о проекте", "Поделиться ботом" }
                })
            {
                ResizeKeyboard = true
            };
            Message sentMessage = await botClient.SendTextMessageAsync(
                chatId: update.Message.Chat.Id,
                text: "dcs",
                cancellationToken: cancellationToken,
                replyMarkup: replyKeyboard);
            _userStates[update.Message.Chat.Id] = State.WaitingButton;
        }
    }

    private async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update,
        CancellationToken cancellationToken)
    {
        if (update.Message is not { Text: { } messageText } message)
            return;
        if (!_userStates.ContainsKey(message.Chat.Id))
        {
            _userStates[message.Chat.Id] = State.WaitingStart;
            await botClient.SendTextMessageAsync(message.Chat.Id, "Введите команду /start",
                cancellationToken: cancellationToken);                                     
            return;
        }
            

        if (_userStates[message.Chat.Id] == State.WaitingName)
        {
            message.Chat.FirstName = messageText;
            _userStates[message.Chat.Id] = State.WaitingLastName;
            await botClient.SendTextMessageAsync(message.Chat.Id, "Введите вашу фамилию: ",
                cancellationToken: cancellationToken);                                  
        }

        if (_userStates[message.Chat.Id] == State.WaitingLastName)
        {
            
        }

        if (messageText == "/start" && _userStates[message.Chat.Id] == State.WaitingStart)
            await HandleStart(botClient, update, cancellationToken);
        if (messageText == "Регистрация" && _userStates[message.Chat.Id] == State.WaitingButton)
        {
            _userInfos[message.Chat.Id] = new UserInfo();
            await botClient.SendTextMessageAsync(message.Chat.Id, "Введите ваше имя: ",
                cancellationToken: cancellationToken);
            _userStates[message.Chat.Id] = State.WaitingName;
        }
    }


    private static Task HandlePollingErrorAsync(ITelegramBotClient botClient, Exception exception,
        CancellationToken cancellationToken)
    {
        var errorMessage = exception switch
        {
            ApiRequestException apiRequestException
                => $"Telegram API Error:\n[{apiRequestException.ErrorCode}]\n{apiRequestException.Message}",
            _ => exception.ToString()
        };
        
        Console.WriteLine(errorMessage);
        return Task.CompletedTask;
    }
}